<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd"
    default-lazy-init="false">

    <beans profile="development">
        <!-- 缺省PropertyPlaceholder定义 -->
        <bean class="lab.s2jh.ctx.ExtPropertyPlaceholderConfigurer">
            <property name="locations">
                <list>
                    <value>classpath:/application.properties</value>
                    <value>classpath:/application_prd.properties</value>
                </list>
            </property>
            <property name="ignoreResourceNotFound" value="true" />
            <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        </bean>

        <!-- H2文件模式数据库，实际开发替换成其他MySQL、Oracle等数据库配置即可，注意别忘了在pom.xml中添加对应数据库驱动的依赖 -->
        <!-- <bean id="dataSourceSpied" class="org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean">
            <property name="databaseName" value="${user.dir}/h2/prototype" />
            <property name="databaseConfigurer">
                <bean class="lab.s2jh.core.dao.h2.H2EmbeddedFileDatabaseConfigurer" />
            </property>
        </bean> -->
        
        <!-- <jee:jndi-lookup id="dataSourceSpied" jndi-name="java:comp/env/jdbc/s2jh" />
 -->
        <!-- 定制log4jdbc做一些输出SQL信息的微调 -->
      <!--   <bean id="extSlf4jSpyLogDelegator" class="lab.s2jh.core.dao.log4jdbc.ExtSlf4jSpyLogDelegator" />
 -->
        <!-- 用log4jdbc对datasouce进行包裹实现完整的SQL语句跟踪 -->
   <!--      <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource" depends-on="extSlf4jSpyLogDelegator">
            <constructor-arg>
                <ref bean="dataSourceSpied" />
            </constructor-arg>
        </bean> -->
        
        
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 公司测试库 --> 
	    <property name="url" value="${jdbc.url}" />  
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	    
	    <!-- 配置初始化大小、最小、最大 -->
	    
	    <property name="maxActive" value="150"/>
	   <!--  <property name="maxIdle" value="50"/> -->
	    <property name="minIdle" value="1" /> 
	     <property name="initialSize" value="1" />
	    <property name="maxWait" value="10000"/>
	   <!--   <property name="filters" value="stat" />  -->
	    <property name="removeAbandoned" value="true" /> 			<!-- 打开removeAbandoned功能 -->
	    <property name="removeAbandonedTimeout" value="900" /> 		<!-- 900秒，也就是15分钟 -->
	    <property name="logAbandoned" value="true" /> 				<!-- 关闭abandoned连接时输出错误日志 -->
	    
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000" />
   
      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />
	    
	  <property name="validationQuery" value="SELECT 'x' FROM DUAL" />
      <property name="testWhileIdle" value="true" />
      <property name="testOnBorrow" value="false" />
      <property name="testOnReturn" value="false" />
	    
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	    
	     <!-- 配置监控统计拦截的filters -->
         <property name="filters" value="stat" /> 
      
	  </bean> 
	  

        <jdbc:initialize-database data-source="dataSource" ignore-failures="ALL"
            enabled="${jdbc.initialize.database.enable}">

            <jdbc:script location="classpath:sql/ddl/quartz/tables_h2.sql" encoding="UTF-8" />

            <jdbc:script location="classpath:sql/data/t_sys_data_dict.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_sys_menu.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_privilege.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_role.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_department.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_user.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_user_r2_role.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_sys_pub_post.sql" encoding="UTF-8" />

            <jdbc:script location="classpath:sql/data/biz_finance_account_subject.sql" encoding="UTF-8" />
        </jdbc:initialize-database>

        <bean id="mockDataGenerator" class="lab.s2jh.biz.util.MockDataGenerator" init-method="initializeDatabase">
            <property name="enabled" value="${jdbc.initialize.database.enable}" />
            <property name="entityManagerFactory" ref="entityManagerFactory" />
            <property name="transactionManager" ref="transactionManager" />
        </bean>

        <import resource="classpath:/service/spring*.xml" />
    </beans>

    <beans profile="production">
        <!-- 缺省PropertyPlaceholder定义 -->
        <bean class="lab.s2jh.ctx.ExtPropertyPlaceholderConfigurer">
            <property name="locations">
                <list>
                    <value>classpath:/application.properties</value>
                </list>
            </property>
            <property name="ignoreResourceNotFound" value="true" />
            <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        </bean>

        <jee:jndi-lookup id="dataSourceSpied" jndi-name="java:comp/env/jdbc/s2jh" />

        <!-- 定制log4jdbc做一些输出SQL信息的微调 -->
        <bean id="extSlf4jSpyLogDelegator" class="lab.s2jh.core.dao.log4jdbc.ExtSlf4jSpyLogDelegator" />

        <!-- 用log4jdbc对datasouce进行包裹实现完整的SQL语句跟踪 -->
        <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource" depends-on="extSlf4jSpyLogDelegator">
            <constructor-arg>
                <ref bean="dataSourceSpied" />
            </constructor-arg>
        </bean>

        <jdbc:initialize-database data-source="dataSource" ignore-failures="ALL"
            enabled="${jdbc.initialize.database.enable}">

            <jdbc:script location="classpath*:sql/ddl/quartz/tables_mysql.sql" encoding="UTF-8" />

            <jdbc:script location="classpath:sql/data/t_sys_data_dict.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_sys_menu.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_privilege.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_role.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_department.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_user.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_user_r2_role.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_sys_pub_post.sql" encoding="UTF-8" />
            
            <jdbc:script location="classpath:sql/data/biz_finance_account_subject.sql" encoding="UTF-8" />
        </jdbc:initialize-database>

        <import resource="classpath:/service/spring*.xml" />
    </beans>


    <beans profile="mysql">
        <!-- 缺省PropertyPlaceholder定义 -->
        <bean class="lab.s2jh.ctx.ExtPropertyPlaceholderConfigurer">
            <property name="locations">
                <list>
                    <value>classpath:/application.properties</value>
                </list>
            </property>
            <property name="ignoreResourceNotFound" value="true" />
            <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        </bean>

        <bean id="dataSourceSpied" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
            <property name="poolProperties">
                <bean class="org.apache.tomcat.jdbc.pool.PoolProperties">
                    <property name="driverClassName" value="com.mysql.jdbc.Driver" />
                    <!-- 创建MySQL UTF-8编码数据库脚本：CREATE DATABASE s2jh DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; -->
                    <property name="url" value="jdbc:mysql://localhost:3306/s2jh?characterEncoding=utf8" />
                    <property name="username" value="root" />
                    <property name="password" value="root" />
                </bean>
            </property>
        </bean>

        <!-- 定制log4jdbc做一些输出SQL信息的微调 -->
        <bean id="extSlf4jSpyLogDelegator" class="lab.s2jh.core.dao.log4jdbc.ExtSlf4jSpyLogDelegator" />

        <!-- 用log4jdbc对datasouce进行包裹实现完整的SQL语句跟踪 -->
        <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource" depends-on="extSlf4jSpyLogDelegator">
            <constructor-arg>
                <ref bean="dataSourceSpied" />
            </constructor-arg>
        </bean>

        <jdbc:initialize-database data-source="dataSource" ignore-failures="ALL"
            enabled="${jdbc.initialize.database.enable}">

            <jdbc:script location="classpath*:sql/ddl/quartz/tables_mysql.sql" encoding="UTF-8" />

            <jdbc:script location="classpath:sql/data/t_sys_data_dict.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_sys_menu.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_privilege.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_role.sql" encoding="UTF-8" />
             <jdbc:script location="classpath:sql/data/t_auth_department.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_user.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_user_r2_role.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_sys_pub_post.sql" encoding="UTF-8" />
        </jdbc:initialize-database>

        <import resource="classpath:/service/spring*.xml" />
    </beans>
    
    
    <beans profile="oschina">
        <!-- 缺省PropertyPlaceholder定义 -->
        <bean class="lab.s2jh.ctx.ExtPropertyPlaceholderConfigurer">
            <property name="locations">
                <list>
                    <value>classpath:/application.properties</value>
                </list>
            </property>
            <property name="ignoreResourceNotFound" value="true" />
            <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        </bean>

        <bean id="dataSourceSpied" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
            <property name="poolProperties">
                <bean class="org.apache.tomcat.jdbc.pool.PoolProperties">
                    <property name="driverClassName" value="com.mysql.jdbc.Driver" />
                    <!-- 创建MySQL UTF-8编码数据库脚本：CREATE DATABASE s2jh DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; -->
                    <property name="url" value="jdbc:mysql://${MOPAAS_MYSQL16303_HOST}:${MOPAAS_MYSQL16303_PORT}/${MOPAAS_MYSQL16303_NAME}?characterEncoding=utf8" />
                    <property name="username" value="${MOPAAS_MYSQL16303_USERNAME}" />
                    <property name="password" value="${MOPAAS_MYSQL16303_PASSWORD}" />
                </bean>
            </property>
        </bean>

        <!-- 定制log4jdbc做一些输出SQL信息的微调 -->
        <bean id="extSlf4jSpyLogDelegator" class="lab.s2jh.core.dao.log4jdbc.ExtSlf4jSpyLogDelegator" />

        <!-- 用log4jdbc对datasouce进行包裹实现完整的SQL语句跟踪 -->
        <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource" depends-on="extSlf4jSpyLogDelegator">
            <constructor-arg>
                <ref bean="dataSourceSpied" />
            </constructor-arg>
        </bean>

        <jdbc:initialize-database data-source="dataSource" ignore-failures="ALL"
            enabled="${jdbc.initialize.database.enable}">

            <jdbc:script location="classpath*:sql/ddl/quartz/tables_mysql.sql" encoding="UTF-8" />

            <jdbc:script location="classpath:sql/data/t_sys_data_dict.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_sys_menu.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_privilege.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_role.sql" encoding="UTF-8" />
             <jdbc:script location="classpath:sql/data/t_auth_department.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_user.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_auth_user_r2_role.sql" encoding="UTF-8" />
            <jdbc:script location="classpath:sql/data/t_sys_pub_post.sql" encoding="UTF-8" />
        </jdbc:initialize-database>

        <import resource="classpath:/service/spring*.xml" />
    </beans>

    <!-- 用于Unit Test配置 -->
    <beans profile="test">
        <!-- 缺省PropertyPlaceholder定义 -->
        <bean class="lab.s2jh.ctx.ExtPropertyPlaceholderConfigurer">
            <property name="locations">
                <list>
                    <value>classpath:/application.properties</value>
                    <value>classpath:/application-test.properties</value>
                </list>
            </property>
            <property name="ignoreResourceNotFound" value="true" />
            <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        </bean>

        <!-- 嵌入式内存中数据库 -->
        <jdbc:embedded-database id="dataSourceSpied" type="H2">
            <jdbc:script location="classpath:sql/ddl/quartz/tables_h2.sql" encoding="UTF-8" />
        </jdbc:embedded-database>

        <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
            <constructor-arg>
                <ref bean="dataSourceSpied" />
            </constructor-arg>
        </bean>
    </beans>
</beans>
